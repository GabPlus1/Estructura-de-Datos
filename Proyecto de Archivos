#include <iostream>

using namespace std;

struct Productos {
    int codProducto;
    char nomProducto[30];
    int cantidad;
    int preciounitario;
};

int menu();
void mostrarmenu(int opc, FILE*P, Productos producto, int codigo, char respuesta);
void salvarInventario(PRODUCTOS p[], int dp);
void ingresar(FILE* P, Productos& producto);
void eliminarDatoProd(V_PORDUCTOS *vp);
void mostrar(FILE* P, Productos& producto);
void mostrarPorCodigo(FILE* P, int codigo);
void recuperarDatos(FILE *F, PRODUCTOS p[], int *dp);
void salir();

int main() {
    int opc;
    char rpta;
    int codigo;
    Productos producto;
    FILE* P;
	
	mostrarmenu(opc, P, producto, codigo, rpta);
    salir();
}

int menu() {
    int opcion;
    cout << " ======================================";
    cout << "\n          REGISTRO DE PRODUCTOS";
    cout << "\n ======================================\n";
    cout << "\n 1. Crear archivo de productos \n";
    cout << " 2. Ingresar nuevo producto \n";
    cout << " 3. Mostrar relacion de productos \n";
    cout << " 4. Mostrar producto por codigo \n";
    cout << "\n Digite una opcion ==> "; cin >> opcion;
    return opcion;
}

void mostrarmenu(int opc, FILE*P, Productos producto, int codigo, char respuesta){
	do {
        system("cls");
        opc = menu();
		switch (opc) {
            case 1: crear(P); break;
            case 2: ingresar(P, producto); break;
            case 3: mostrar(P, producto); break;
            case 4: mostrarPorCodigo(P,codigo); break;
            default:
            	cout<<"\n Opcion invalida. Digite una opcion disponible.\n";
		}
		cout << "\n Desea continuar S/N ==> ";
        cin >> respuesta;
        system("cls");
    } while (respuesta == 'S' || respuesta == 's');
}

void salvarInventario(PRODUCTOS p[], int dp){
	PRODUCTOS v;
	FILE *F;
	F=fopen("inventario.dat","w");
	if(F==NULL){
		cout<<"no se ha abierto el archivo"<<endl;
	}
	else{
		for(int i=0;i<dp;i++){
			v=p[i];
			fwrite(&v,size(v),1,F);
		}
		fclose(F);
	}
}

void LeerInventario(){
    int i, n;
    productos A;
    FILE *f;
    f = fopen( "inventario.dat", "r" );
    
    if( f == NULL ){
    	cout << "ERROR, no se pudo abrir el archivo";
    } else {
    	fread( &valor, sizeof( productos ), 1, f );
    	while( !feof( f ) ){
    		cout << "Codigo del producto:" << A.codProducto << endl;
    		cout << "Nombre del producto:" << A.nomProducto << endl;
    		cout << "Cantidad del producto:" << A.numCantidad << endl;
    		cout << "Precio del producto:" << A.precio << endl;
    		fread( &valor, sizeof( productos ), 1, f );
    	}
    fclose( f );
    }
}

void ingresar(FILE* P, Productos& producto) {
    char temp[2];
    system("cls");
    cout << "\n ========================================";
    cout << "\n       INGRESO DE NUEVO PRODUCTO";
    cout << "\n ========================================\n";
    cout << "\n Digite los datos del nuevo producto:\n\n";

    cout << " Codigo de producto: "; cin >> producto.codProducto;
    cin.ignore(); // Agregado para limpiar el buffer
    cout << " Nombre del producto: "; cin.getline(producto.nomProducto, sizeof(producto.nomProducto));
    cout << " Cantidad de unidades: "; cin >> producto.cantidad;
    cin.ignore(); // Agregado para limpiar el buffer
    cout << " Precio por unidad: S/. "; cin >> producto.preciounitario;

    P = fopen("c:Productos.txt", "a");
    if (P != NULL) {
        fwrite(&producto, sizeof(producto), 1, P);
        if (!ferror(P))
            fclose(P);
        else
            cout << " Error de escritura en el archivo \n";
    } else
        cout << " No se puede abrir el archivo \n";
}

void mostrar(FILE* P, Productos& producto) {
    int i;
	system("cls");

    P = fopen("c:Productos.txt", "r");
    if (P == NULL) {
        cout << " No se puede abrir el archivo Productos \n";
        system("pause");
    } else {
    	cout << "\n ==================================================================================";
    	cout << "\n                                  PRODUCTOS REGISTRADOS";
    	cout << "\n ==================================================================================";
        cout << "\n    Codigo   |      Nombre      |   Cantidad de unidades   | Precio unitario (S/.)";
        cout << "\n ==================================================================================\n";
        while (!feof(P)) {
            fread(&producto, sizeof(producto), 1, P);
            if (ferror(P)) {
                cout << " Error de Lectura de Archivo \n";
                system("pause");
            }

            if (!feof(P)) {
                cout <<"      "<<producto.codProducto<<"		  "<<producto.nomProducto<<"		 "<<producto.cantidad<<"			   "<<producto.preciounitario<<endl;
            }
        }
        fclose(P);
    }
}

void mostrarPorCodigo(FILE* P, int codigo) {
    Productos producto;
    system("cls");
    cout<< "\n Ingrese el codigo del producto a mostrar: ";
    cin>>codigo;
    
    P = fopen("c:Productos.txt", "r");
    if (P == NULL) {
        cout << " No se puede abrir el archivo Productos \n";
        system("pause");
    } else {
        bool encontrado = false;

        while (!feof(P)) {
            fread(&producto, sizeof(producto), 1, P);
            if (ferror(P)) {
                cout << " Error de Lectura de Archivo \n";
                system("pause");
            }
            if (!feof(P) && producto.codProducto == codigo) {
                encontrado = true;
			    cout << "\n ========================================";
			    cout << "\n           DATOS DEL PRODUCTO";
			    cout << "\n ========================================\n";
                cout << "\n Codigo del producto: " << producto.codProducto << "\n";
                cout << " Nombre del producto: " << producto.nomProducto << "\n";
                cout << " Cantidad de unidades: " << producto.cantidad << "\n";
                cout << " Precio por unidad: S/. " << producto.preciounitario << "\n";
                break;
            }
        }

        if (!encontrado) {
            cout << "\n Producto no encontrado con el codigo " << codigo << "\n";
        }
        fclose(P);
    }
}

void recuperarDatos(FILE *F, PRODUCTOS p[], int *dp){
	producto v;
	F=fopen("inventario.dat","r");
	*dp=-1
	if(F==NULL){
		cout<<"no se ha abierto el archivo"<endl;
	}
	else{
		fread(&v,size(v),1,F);
		while(!feof(F)){
			if(*dp<0){
				*dp=0
				p[*dp]=v;
				*dp=*dp+1
			}
			else{
				if(*dp!=dimension){
					p[*dp]=v;
					*dp=*dp+1
				}
				else{
					cout<<"fuera de rango"<<endl;
				}
			}
			fread(&v,size(v),1,F);
		}
	}
}
void salir() {
    cout << "\n Gracias por usar nuestro sistema. Vuelva pronto.\n";
}
    P = fopen("c:Productos.txt", "r");
    if (P == NULL) {
        cout << " No se puede abrir el archivo Productos \n";
        system("pause");
    } else {
        bool encontrado = false;

        while (!feof(P)) {
            fread(&producto, sizeof(producto), 1, P);
            if (ferror(P)) {
                cout << " Error de Lectura de Archivo \n";
                system("pause");
            }
            if (!feof(P) && producto.codProducto == codigo) {
                encontrado = true;
			    cout << "\n ========================================";
			    cout << "\n           DATOS DEL PRODUCTO";
			    cout << "\n ========================================\n";
                cout << "\n Codigo del producto: " << producto.codProducto << "\n";
                cout << " Nombre del producto: " << producto.nomProducto << "\n";
                cout << " Cantidad de unidades: " << producto.cantidad << "\n";
                cout << " Precio por unidad: S/. " << producto.preciounitario << "\n";
                break;
            }
        }

        if (!encontrado) {
            cout << "\n Producto no encontrado con el codigo " << codigo << "\n";
        }
        fclose(P);
    }
}

void salir() {
    cout << "\n Gracias por usar nuestro sistema. Vuelva pronto.\n";
}

void eliminarDatoProd(V_PRODUCTOS *vp)
{
    PRODUCTOS aux;
    int pos, n, i;
    char confir;
    n=vp->dx;
    if (n>0) {
        if (n<=MAX) {
            cout<<"Ingrese la posición de la mercancia a eliminar ---> ";
            cin>> pos;
            if(pos>=0 && pos<=n) {
                system("cls");
		cout<<"Esta seguro de eliminar esta posicion?---s/n\n";
                fflush(stdin);
                cin>>confir;
                if(confir=='s'||confir=='S') {
                    for (i=(pos-1); i<n; i++) {
			aux = vp->x[i];
                        vp->x[i] = vp->x[i+1];
                        vp->x[i+1] = aux;
                    }
                    n=n-1;
                    vp->dx=n;
                }

            } else {
                cout<<"Posición no encontrada\n";
                system("pause");
            }
        } else {
            cout<<"Dimension fuera de rango\n";
            system("pause");
        }
    } else {
        cout<<"Registro mercancia vacio\n";
        system("pause");
    }
}

void recuperarDatosModi(V_MODIFICADOR *vp)
{
    MODIFICADOR a;
    int i,val;
    FILE *f;
    i=0;
    f=fopen("datosMercancia.dat", "r");
    if(f==NULL) {
        cout<<"ERROR al abrir el file...\n";
        exit(0);
    } else {
        fread(&a,sizeof(a),1,f);
        while(!feof(f)) {
            vp->x[i]=a;
            i=i+1;
            fread(&a,sizeof(a),1,f);
        }
        vx->dx=i;
        fclose(f);
    }
}
