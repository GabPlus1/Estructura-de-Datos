#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>
#define STR50 50
#define MAX 20

#include <fstream>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <sstream> // Para stringstream
#include <string>

using namespace std;

struct PRODUCTOS{
   int codProductos;
   char nomProductos[STR50];
   int numCantidad;
   float precio;
};
struct V_PRODUCTOS{
   PRODUCTOS p[MAX];
   int dp;
};

struct OPERACIONES{
   char codOperacion;
   int numUnidades;
};

struct V_MODIFICADOR{
   OPERACIONES m[MAX];
   int dm;
};

struct MODIFICADOR{
   int codProducto;
   V_MODIFICADOR vm;
};

void crearInventarioProductos();
void leerInventarioProductos();
void recuperarDatosProduc( V_PRODUCTOS *vp );
void recuperarDatosModi( MODIFICADOR *vm );
void mostrarDatosProduc( V_PRODUCTOS vp );
void IngresarOperaciones( MODIFICADOR *vm );
int buscarXCodigoProduc( V_PRODUCTOS vp, int codigo);
void crearFileModificador();
void leerFileModificador();


void GIANcrearInventario(PRODUCTOS p[], int dp);

int main()
{
   V_PRODUCTOS a;
   MODIFICADOR b;

   //crearFileModificador();

   //leerFileModificador();
   leerInventarioProductos();
   

   system("pause");
   return(0);
}
void GIANcrearInventario(PRODUCTOS p[], int dp){
	PRODUCTOS v;
	FILE *F;
	F=fopen("inventario.data","w");
	if(F==NULL){
		cout<<"no se ha abierto el archivo"<<endl;
	}
	else{
		for(int i=0;i<dp;i++){
			v=p[i];
			fwrite(&v,sizeof(v),1,F);
		}
		fclose(F);
	}
}

void crearInventarioProductos()
{
   FILE *f;
   int n, val;
   PRODUCTOS p;
   f = fopen( "InventarioProductosOriginal.dat", "w");
   if( f == NULL ){
      cout << "ERROR, no se pudo abrir el file";
   } else {
      cout << "Ingrese la cantidad de elementos: ";
      cin >> n;
      for( int i = 0; i < n; i++ ){
         cout << "Elemento [" << i + 1 << "] "<<endl;
         cout << "Codigo de producto: ";
         cin >> p.codProductos;
         fflush(stdin);
         cout << "Nombre del producto: ";
         cin.getline( p.nomProductos, sizeof( p.nomProductos ) );
         fflush(stdin);
         cout << "Cantidad: ";
         cin >> p.numCantidad;
         fflush(stdin);
         cout << "Precio: S/";
         cin >> p.precio;
         fflush(stdin);
         cout<<endl;
         fwrite( &p, sizeof( PRODUCTOS ), 1, f );
      }
      fclose(f);
   }


}

string centerString(const string& str, int width) {
    int spaces = width - str.length();
    int leftPadding = spaces / 2 + str.length();
    return string(leftPadding, ' ') + str;
}

string centerNumber(int value, int width) {
    stringstream ss;
    ss << value;
    string str = ss.str();
    int spaces = width - str.length();
    int leftPadding = spaces / 2 + str.length();
    return string(leftPadding, ' ') + str;
}

void leerInventarioProductos() {
   int i = 0;
   PRODUCTOS p;
   FILE *f;
   f = fopen( "InventarioProductosOriginal.dat", "r+" );

    if (f == NULL ) {
        cout << "ERROR, no se pudo abrir el archivo";
    } else {
    	
		fread( &p, sizeof( PRODUCTOS ), 1, f );
		
        cout << "\n =======================================================================================================";
        cout << "\n                                  PRODUCTOS REGISTRADOS";
        cout << "\n =======================================================================================================";
        cout << "\n Nro   |   Codigo   |         Nombre          |   Cantidad de unidades   | Precio unitario (S/.)";
        cout << "\n -------------------------------------------------------------------------------------------------------\n";

        while ( !feof(f) ) {

            cout << "" << centerNumber(i + 1, 6);
            cout << centerNumber(p.codProductos, 13);
            cout << centerString(p.nomProductos, 27);
            cout << centerNumber(p.numCantidad, 28);
            cout << centerNumber(p.precio, 24);

            cout << endl;
            fread( &p, sizeof( PRODUCTOS ), 1, f );
            i++;
        }
        cout << " -------------------------------------------------------------------------------------------------------\n";

        fclose( f );
    }
}

void recuperarDatosProduc( V_PRODUCTOS *vp )
{
    PRODUCTOS a;
    int i,val;
    FILE *f;
    i = 0;
    f = fopen("InventarioProductosOriginal.dat", "r+");
    if( f == NULL ) {
        cout << "ERROR al abrir el file...\n";
        exit(0);
    } else {
        fread( &a, sizeof(a) ,1 , f );
        while( !feof(f) ) {
            vp -> p[i] = a;
            i = i + 1;
            fread( &a, sizeof(a), 1, f );
        }
        vp -> dp = i;
        fclose( f );


    }
}

void mostrarDatosProduc( V_PRODUCTOS vp )
{
   int n;
   n = vp.dp;
   if( n < 0 ){
      cout << "Vector vacio"<<endl;
   } else {
      for( int i = 0; i < n; i++ ){
         cout << "Elemento [" << i + 1 << "] " << endl;
         cout << "Codigo del producto: " << vp.p[i].codProductos << endl;
         cout << "Nombre del producto: "<<vp.p[i].nomProductos << endl;
         cout << "Cantidad: " << vp.p[i].numCantidad << endl;
         cout << "Precio: " << vp.p[i].precio << endl;
         cout << endl;
      }
   }
}

void IngresarOperaciones( MODIFICADOR *Vm )
{
   PRODUCTOS a;
   MODIFICADOR b;
   int opcion, auxiliar, i = 0;
   char decision;
   cout << "Ingrese el codigo del producto: ";
   cin >> b.codProducto;

   do{
      cout << "Seleccione la operacion: " << endl;
      cout << "0. Salir" << endl;
      cout << "1. Venta" << endl;
      cout << "2. Compra" << endl;
      cout << "3. Devolucion" << endl;
      cout << "Opcion: ";
      cin >> opcion;
      switch( opcion ){
         case 0:
            break;
         case 1:

            cout << "Operacion de Venta" << endl;
            b.vm.m[i].codOperacion = 'V';
            cout << "Ingrese la cantidad de se vendera: ";
            cin >> b.vm.m[i].numUnidades;

            break;
         case 2:

            cout << "Operacion de Compra" << endl;
            b.vm.m[i].codOperacion = 'C';
            cout << "Ingrese la cantidad de se comprara: ";
            cin >> b.vm.m[i].numUnidades;

            break;
         case 3:

            cout << "Operacion de Devolucion" << endl;
            b.vm.m[i].codOperacion = 'D';
            cout << "Ingrese la cantidad de se devolvera: ";
            cin >> b.vm.m[i].numUnidades;

            break;
         default:

            cout << "Opcion incorrecta..." << endl;

            break;

      }
      fflush( stdin );
      cout << "Desea hacer otra operacion para el producto " << b.codProducto <<" --->S/N" << endl;
      cout << "Opcion: ";
      cin >> decision;
      i = i + 1;
      cout<<endl;
   }while( decision == 's' || decision == 'S' );
   b.vm.dm = i;
   *Vm = b;
   cout<<endl;

}
void crearFileModificador()
{
   int n;
   MODIFICADOR a;
   FILE *f;
   f = fopen( "ArchivoModificador.dat", "w");
   if( f == NULL ){
      cout << "ERROR, no se pudo abrir el file";
   } else {
      cout << "Ingrese la cantidad de elementos: ";
      cin >> n;
      for( int i = 0; i < n; i++ ){
         IngresarOperaciones( &a );
         fwrite( &a, sizeof( MODIFICADOR ), 1, f );
      }
      fclose(f);
   }
}

void leerFileModificador(){
   MODIFICADOR a;
   FILE *f;
   f = fopen( "ArchivoModificador.dat", "r+");

   if( f == NULL ){
      cout << "ERROR, no se pudo abrir el file" << endl;
   } else {
      fread( &a, sizeof( MODIFICADOR ), 1, f );
      while( !feof( f ) ){
         cout<<a.codProducto<<"       ";
         for( int j = 0; j < a.vm.dm ; j++ ){
         cout<<"                   ";
         cout<<a.vm.m[j].codOperacion;
         cout<<"    ";
         cout<<a.vm.m[j].numUnidades<<endl;
         }
         fread( &a, sizeof( MODIFICADOR ), 1, f );
      }
      fclose( f );
   }
}

int buscarXCodigoProduc( V_PRODUCTOS vp, int codigo)
{
   int i, n;
   bool hallado = false;
   n = vp.dp;
   i = 0;
   if( n > 0 ){
      while( i < n && hallado == false ){
         if( codigo == vp.p[i].codProductos ){
            hallado = true;
            return i;
         } else {
            i = i + 1;
         }

      }
      if( hallado == false ){
            cout << "No se encontro el codigo del producto" << endl;
         }
   } else {
      cout << "Vector vacio..."<< endl;
      return -1 ;
   }
   return 0;
}
